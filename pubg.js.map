{"version":3,"sources":["webpack:///webpack/bootstrap c52c495de27e4fd7a781","webpack:///./src/matches/Match.js","webpack:///./src/Player.js","webpack:///./src/Season.js","webpack:///./package.json","webpack:///./src/matches/Asset.js","webpack:///./src/matches/Roster.js","webpack:///./src/matches/Participant.js","webpack:///./src/Status.js","webpack:///./src/playerseason/PlayerSeason.js","webpack:///./src/playerseason/GameModeStats.js","webpack:///./src/index.js","webpack:///./src/Client.js","webpack:///./node_modules/snekfetch/src/index.mjs","webpack:///./node_modules/snekfetch/src/index.js","webpack:///./node_modules/snekfetch/src/browser/index.js","webpack:///./node (ignored)","webpack:///./src/util/Util.js","webpack:///./src/util/Constants.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C,gBAAgB;;AAE/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,KAAK;AAC3B,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B;AACA,sBAAsB,OAAO;AAC7B;AACA,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,aAAa;AACnC,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C,gBAAgB;;AAE/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B,sBAAsB,KAAK;AAC3B,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;;AAEA;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C,gBAAgB;;AAE/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACtDA,kBAAkB,oJAAoJ,iRAAiR,eAAe,gEAAgE,gFAAgF,kDAAkD,kHAAkH,qBAAqB,oBAAoB,8G;;;;;;ACAnyB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB,sBAAsB,KAAK;AAC3B,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,kBAAkB;AAClB,sBAAsB,OAAO;AAC7B,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;;;;;;;AC5LA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,UAAU;AACV,UAAU;AACV,UAAU;AACV,UAAU;AACV,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,2DAA2D,QAAQ,2CAA2C,yCAAyC,KAAK,EAAE;AACpM;AACA;AACA;AACA;AACA,sCAAsC,qCAAqC,oFAAoF,EAAE;AACjK;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,sBAAsB,8CAA8C,WAAW,8CAA8C,6FAA6F;AAC5P;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,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CL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uCAAuC;AACrD;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,sBAAsB;AACxC,kBAAkB,OAAO;AACzB,kBAAkB,QAAQ;AAC1B,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,WAAW,GAAG,WAAW;AAC1D;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,YAAY,gCAAgC;;AAEhG;AACA;AACA,4BAA4B,IAAI,GAAG,8CAA8C,EAAE,YAAY,MAAM,OAAO;AAC5G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,2BAA2B;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;;;;;;;ACrPA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;;;;;;ACpCA,e;;;;;;ACAA;;AAEA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA,oDAAoD,mBAAmB,UAAU,MAAM,GAAG,SAAS,mBAAmB,mBAAmB,GAAG,SAAS;AACrJ;;AAEA,+BAA+B;AAC/B;AACA;AACA;;AAEA;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"out/pubg.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c52c495de27e4fd7a781","const Asset = require('./Asset');\nconst Roster = require('./Roster');\n\n/**\n * Match objects contain the results of a completed match such as the game mode played, duration, and which players participated\n * @class Match\n */\nclass Match {\n    constructor(content, client, included) {\n        /**\n         * The client that created the Player\n         * @type {Client}\n         */\n        Object.defineProperty(this, 'client', { value: client });\n\n        if (typeof content === 'string') {\n            this.id = content;\n            this.full = false;\n            return;\n        }\n\n        /**\n         * API id of the player\n         * @type {string}\n         */\n        this.id = content.id;\n\n        /**\n         * If the match contains full data or needs `.fetch()`\n         * @type {boolean}\n         */\n        this.full = true;\n\n        /**\n         * Attributes of the Match\n         * @type {Object}\n         * @property {Date} attributes.createdAt Time this match object was stored in the API\n         * @property {number} attributes.duration Length of the match\n         * @property {string} attributes.gameMode Game mode played\n         * * duo, duo-fpp, solo, solo-fpp, squad, squad-fpp\n         * @property {string} attributes.mapName Map name\n         * * Desert_Main, Erangel_Main\n         * @property {string} attributes.patchVersion N/A\n         * @property {string} attributes.shardId Platform-region shard\n         * @property {Object} attributes.stats N/A\n         * @property {Object} attributes.tags N/A\n         * @property {string} attributes.titleId Identifies the studio and game\n         */\n        this.attributes = {\n            createdAt: new Date(content.attributes.createdAt),\n            duration: content.attributes.duration,\n            gameMode: content.attributes.gameMode,\n            mapName: content.attributes.mapName,\n            patchVersion: content.attributes.patchVersion,\n            shardId: content.attributes.shardId,\n            stats: content.attributes.stats,\n            tags: content.attributes.tags,\n            titleId: content.attributes.titleId,\n        };\n\n        /**\n         * Relations of the Match\n         * @type {Object}\n         * @property {Array<Asset>} relationships.assets Array of all referenced assets\n         * @property {Array<Roster>} relationships.rosters Array of all referenced rosters\n         */\n        this.relationships = {\n            assets: content.relationships.assets.data.map(p => new Asset(included.find(i => i.type === 'asset' && i.id === p.id), included)),\n            // eslint-disable-next-line\n            rosters: content.relationships.rosters.data.map(p => new Roster(included.find(i => i.type === 'roster' && i.id === p.id), included)),\n        };\n    }\n\n    /**\n     * Fetches the full match\n     * @returns {Promise<Match>}\n     * @memberof Match\n     */\n    fetch() {\n        return this.client.getMatch(this.id);\n    }\n\n    /**\n     * Fetches telemetry data of the match\n     * @returns {Promise<Object>}\n     * @memberof Match\n     */\n    fetchTelemetry() {\n        return this.client.getTelemetry(this.relationships.assets[0].attributes.URL);\n    }\n}\n\nmodule.exports = Match;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/matches/Match.js\n// module id = 0\n// module chunks = 0","const Match = require('./matches/Match');\n/**\n * An API returned player object\n * @class Player\n */\nclass Player {\n    constructor(content, client) {\n        /**\n         * The client that created the Player\n         * @type {Client}\n         */\n        Object.defineProperty(this, 'client', { value: client });\n\n        if (typeof content === 'string') {\n            this.id = content;\n            this.full = false;\n            return;\n        }\n\n        /**\n         * API id of the player\n         * @type {string}\n         */\n        this.id = content.id;\n\n        /**\n         * If the player contains full data or needs `.fetch()`\n         * @type {boolean}\n         */\n        this.full = true;\n\n        /**\n         * Attributes of the Player\n         * @type {Object}\n         * @property {string} attributes.name PUBG player name\n         * @property {string} attributes.shardId Platform-region shard\n         * @property {Date} attributes.createdAt Date at which the player account was created\n         * @property {string} attributes.patchVersion Version of the game\n         * @property {string} attributes.titleId Identifies the studio and game\n         */\n        this.attributes = {\n            name: content.attributes.name,\n            shardId: content.attributes.shardId,\n            createdAt: new Date(content.attributes.createdAt),\n            patchVersion: content.attributes.patchVersion,\n            titleId: content.attributes.titleId,\n        };\n\n        /**\n         * References to resource objects related to this player\n         * @type {Object}\n         * @property {Array<Asset>} relationships.assets NOT IN API YET: Array of all assets of the player\n         * @property {Array<Match>} relationships.matches Array of empty Match classes, will need `.fetch()`\n         */\n        this.relationships = {\n            assets: content.relationships.assets.data,\n            matches: content.relationships.matches.data.map(m => new Match(m.id, this.client)),\n        };\n    }\n\n    /**\n     * Get a player season object\n     * @param {(string|Season)} season The season of the player season\n     * @returns {Promise<PlayerSeason>}\n     * @memberof Player\n     */\n    getPlayerSeason(season) {\n        return this.client.getPlayerSeason(this, season);\n    }\n\n    /**\n     * Fetches the full match\n     * @param {string} [shard=this.client.defaultShard] ShardId to fetch the player from\n     * @returns {Promise<Match>}\n     * @memberof Player\n     */\n    fetch(shard = this.client.defaultShard) {\n        return this.client.getPlayer({ id: this.id }, shard);\n    }\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Player.js\n// module id = 1\n// module chunks = 0","/**\n * An API returned Season object\n * @class Season\n */\nclass Season {\n    constructor(content, client) {\n        /**\n         * The client that created the Player\n         * @type {Client}\n         */\n        Object.defineProperty(this, 'client', { value: client });\n\n        if (typeof content === 'string') {\n            this.id = content;\n            this.full = false;\n            return;\n        }\n\n        /**\n         * Season  ID\n         * @type {string}\n         */\n        this.id = content.id;\n\n        /**\n         * If the season contains full data, like it's attributes\n         * @type {boolean}\n         */\n        this.full = true;\n\n        /**\n         * Attributes of the Player\n         * @type {Object}\n         * @property {boolean} attributes.isCurrentSeason Indicates if the season is active\n         * @property {boolean} attributes.shardId Indicates if the season is not active\n         */\n        this.attributes = {\n            isCurrentSeason: content.attributes.isCurrentSeason,\n            isOffSeason: content.attributes.isOffseason,\n        };\n    }\n\n    /**\n     * Get a player season object\n     * @param {(string|Player)} player The player of the player season\n     * @param {string} [shard=player.attributes.shardId|this.defaultShard] The server shard to send the request to\n     * @returns {Promise<PlayerSeason>}\n     * @memberof Season\n     */\n    getPlayerSeason(player, shard) {\n        return this.client.getPlayerSeason(player, this, shard);\n    }\n}\n\nmodule.exports = Season;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Season.js\n// module id = 2\n// module chunks = 0","module.exports = {\"name\":\"pubg.js\",\"version\":\"3.5.2\",\"description\":\"A powerful Playerunknown's Battlegrounds JavaScript API Wrapper\",\"main\":\"src/index.js\",\"scripts\":{\"test\":\"npm run lint && npm run tests\",\"lint\":\"eslint src *.js\",\"tests\":\"node test/index.js\",\"webpack\":\"./node_modules/.bin/webpack --config webpack.config.js\",\"docs\":\"./node_modules/.bin/jsdoc src src/matches src/playerseason README.md -d ./docs -t ./node_modules/minami\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/ickerio/pubg.js.git\"},\"keywords\":[\"pubg\",\"api\",\"wrapper\"],\"author\":\"ickerio\",\"license\":\"ISC\",\"bugs\":{\"url\":\"https://github.com/ickerio/pubg.js/issues\"},\"runkitExampleFilename\":\"docs/example.js\",\"homepage\":\"https://github.com/ickerio/pubg.js#readme\",\"dependencies\":{\"snekfetch\":\"^4.0.0\"},\"devDependencies\":{\"eslint\":\"^4.19.1\",\"jsdoc\":\"^3.5.5\",\"minami\":\"^1.2.3\",\"uglifyjs-webpack-plugin\":\"^1.2.5\",\"webpack\":\"^3.11.0\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package.json\n// module id = 3\n// module chunks = 0","class Asset {\n    constructor(content) {\n        this.id = content.id;\n        this.attributes = {\n            URL: content.attributes.URL,\n            createdAt: content.attributes.createdAt,\n            description: content.attributes.description,\n            name: content.attributes.name,\n        };\n    }\n}\n\nmodule.exports = Asset;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/matches/Asset.js\n// module id = 4\n// module chunks = 0","const Participant = require('./Participant');\n\nclass Roster {\n    constructor(content, included) {\n        this.id = content.id;\n        this.attributes = {\n            shardId: content.attributes.shardId,\n            stats: {\n                rank: content.attributes.stats.rank,\n                teamId: content.attributes.stats.teamId,\n            },\n            won: Boolean(content.attributes.won),\n        };\n        this.relationships = {\n            participants: content.relationships.participants.data.map(p => new Participant(included.find(i => i.type === 'participant' && i.id === p.id))),\n            team: content.relationships.team.data,\n        };\n    }\n}\n\nmodule.exports = Roster;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/matches/Roster.js\n// module id = 5\n// module chunks = 0","class Participant {\n    constructor(content) {\n        this.id = content.id;\n        this.attributes = {\n            actor: content.attributes.actor,\n            shardId: content.attributes.shardId,\n            stats: {\n                DBNOs: content.attributes.stats.DBNOs,\n                assists: content.attributes.stats.assists,\n                boosts: content.attributes.stats.boosts,\n                damageDealt: content.attributes.stats.damageDealt,\n                deathType: content.attributes.stats.deathType,\n                headshotKills: content.attributes.stats.headshotKills,\n                heals: content.attributes.stats.heals,\n                killPlace: content.attributes.stats.killPlace,\n                killPoints: content.attributes.stats.killPoints,\n                killPointsDelta: content.attributes.stats.killPointsDelta,\n                killStreaks: content.attributes.stats.killStreaks,\n                kills: content.attributes.stats.kills,\n                lastKillPoints: content.attributes.stats.lastKillPoints,\n                lastWinPoints: content.attributes.stats.lastWinPoints,\n                longestKill: content.attributes.stats.longestKill,\n                mostDamage: content.attributes.stats.mostDamage,\n                name: content.attributes.stats.name,\n                playerId: content.attributes.stats.playerId,\n                revives: content.attributes.stats.revives,\n                rideDistance: content.attributes.stats.rideDistance,\n                roadKills: content.attributes.stats.roadKills,\n                teamKills: content.attributes.stats.teamKills,\n                timeSurvived: content.attributes.stats.timeSurvived,\n                vehicleDestroys: content.attributes.stats.vehicleDestroys,\n                walkDistance: content.attributes.stats.walkDistance,\n                weaponsAcquired: content.attributes.stats.weaponsAcquired,\n                winPlace: content.attributes.stats.winPlace,\n                winPoints: content.attributes.stats.winPoints,\n                winPointsDelta: content.attributes.stats.winPointsDelta,\n            },\n        };\n    }\n}\n\nmodule.exports = Participant;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/matches/Participant.js\n// module id = 6\n// module chunks = 0","/**\n * An API returned status object\n * @class Status\n */\nclass Status {\n    constructor(content) {\n        /**\n         * Name or id of the api service\n         * @type {string}\n         */\n        this.id = content.id;\n        /**\n         * Attributes of the Status\n         * @type {Object}\n         * @property {Date} attributes.releasedAt Time of the latest version release\n         * @property {string} attributes.version Semantic version\n         */\n        this.attributes = {\n            releasedAt: new Date(content.attributes.releasedAt),\n            version: content.attributes.version,\n        };\n    }\n}\n\nmodule.exports = Status;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Status.js\n// module id = 7\n// module chunks = 0","const GameModeStats = require('./GameModeStats');\nconst Player = require('../Player');\nconst Match = require('../matches/Match');\nconst Season = require('../Season');\n\n/**\n * An API returned player season object\n * @class PlayerSeason\n */\nclass PlayerSeason {\n    constructor(content, client) {\n        /**\n         * Attributes of the PlayerSeason\n         * @type {Object}\n         * @property {Object} attributes.gameModeStats An object full of all game mode types being `duo`, `duoFPP`, `solo`, `soloFPP`, `squad`, `squadFPP`\n         */\n        this.attributes = {\n            gameModeStats: {\n                duo: new GameModeStats(content.attributes.gameModeStats.duo),\n                duoFPP: new GameModeStats(content.attributes.gameModeStats['duo-fpp']),\n                solo: new GameModeStats(content.attributes.gameModeStats.solo),\n                soloFPP: new GameModeStats(content.attributes.gameModeStats['solo-fpp']),\n                squad: new GameModeStats(content.attributes.gameModeStats.squad),\n                squadFPP: new GameModeStats(content.attributes.gameModeStats['squad-fpp']),\n            },\n        };\n\n        /**\n         * Relationships of the PlayerSeason\n         * @type {Object}\n         * @property {Player} relationships.player Player of the PlayerSeason\n         * @property {Array<Match>} relationships.matchesSolo All solo matches played during the season by the player\n         * @property {Array<Match>} relationships.matchesSoloFPP All solo-fpp matches played during the season by the player\n         * @property {Array<Match>} relationships.matchesDuo All duo matches played during the season by the player\n         * @property {Array<Match>} relationships.matchesDuoFPP All duo-fpp matches played during the season by the player\n         * @property {Array<Match>} relationships.matchesSquad All squad matches played during the season by the player\n         * @property {Array<Match>} relationships.matchesSquadFPP All squad-fpp matches played during the season by the player\n         * @property {Season} relationships.season All solo matches played during the season by the player\n         */\n        this.relationships = {\n            player: new Player(content.relationships.player.data.id, client),\n            matchesSolo: content.relationships.matchesSolo.data.map(m => new Match(m.id, this.client)),\n            matchesSoloFPP: content.relationships.matchesSoloFPP.data.map(m => new Match(m.id, this.client)),\n            matchesDuo: content.relationships.matchesDuo.data.map(m => new Match(m.id, this.client)),\n            matchesDuoFPP: content.relationships.matchesDuoFPP.data.map(m => new Match(m.id, this.client)),\n            matchesSquad: content.relationships.matchesSquad.data.map(m => new Match(m.id, this.client)),\n            matchesSquadFPP: content.relationships.matchesSquadFPP.data.map(m => new Match(m.id, this.client)),\n            season: new Season(content.relationships.season.data.id),\n        };\n    }\n}\n\nmodule.exports = PlayerSeason;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/playerseason/PlayerSeason.js\n// module id = 8\n// module chunks = 0","/**\n * An API returned game mode stats\n * @class GameModeStats\n */\nclass GameModeStats {\n    constructor(content) {\n        /**\n         * Assists\n         * @type {Number}\n         */\n        this.assists = content.assists;\n\n        /**\n         * Boosts\n         * @type {Number}\n         */\n        this.boosts = content.boosts;\n\n        /**\n         * Downs but not out\n         * @type {Number}\n         */\n        this.dBNOs = content.dBNOs;\n\n        /**\n         * Daily kills\n         * @type {Number}\n         */\n        this.dailyKills = content.dailyKills;\n\n        /**\n         * Damage dealt\n         * @type {Number}\n         */\n        this.damageDealt = content.damageDealt;\n\n        /**\n         * Days\n         * @type {string}\n         */\n        this.days = content.days;\n\n        /**\n         * Headshot kills\n         * @type {string}\n         */\n        this.headshotKills = content.headshotKills;\n\n        /**\n         * Total HP healed\n         * @type {string}\n         */\n        this.heals = content.heals;\n\n        /**\n         * Kills\n         * @type {string}\n         */\n        this.kills = content.kills;\n\n        /**\n         * Longest kill\n         * @type {string}\n         */\n        this.longestKill = content.longKill;\n\n        /**\n         * Longest time survived\n         * @type {string}\n         */\n        this.longestTimeSurvived = content.longestTimeSurvived;\n\n        /**\n         * Losses\n         * @type {string}\n         */\n        this.losses = content.losses;\n\n        /**\n         * Maximum kill streaks\n         * @type {string}\n         */\n        this.maxKillStreaks = content.maxKillStreaks;\n\n        /**\n         * Most survival time\n         * @type {string}\n         */\n        this.mostSurvivalTime = content.mostSurvivalTime;\n\n        /**\n         * Revives\n         * @type {string}\n         */\n        this.revives = content.revives;\n\n        /**\n         * Ride distance\n         * @type {string}\n         */\n        this.rideDistance = content.rideDistance;\n\n        /**\n         * Road kills\n         * @type {string}\n         */\n        this.roadKills = content.roadKills;\n\n        /**\n         * Round most kills\n         * @type {string}\n         */\n        this.roundMostKills = content.roundMostKills;\n\n        /**\n         * Rounds played\n         * @type {string}\n         */\n        this.roundsPlayed = content.roundsPlayed;\n\n        /**\n         * Suicides\n         * @type {string}\n         */\n        this.suicides = content.suicides;\n\n        /**\n         * Team kills\n         * @type {string}\n         */\n        this.teamKills = content.teamKills;\n\n        /**\n         * Time survived\n         * @type {string}\n         */\n        this.timeSurvived = content.timeSurvived;\n\n        /**\n         * Top 10s\n         * @type {string}\n         */\n        this.top10s = content.top10s;\n\n        /**\n         * Vehicles Destroyed\n         * @type {string}\n         */\n        this.vehicleDestroys = content.vehicleDestroys;\n\n        /**\n         * Walk distance\n         * @type {string}\n         */\n        this.walkDistance = content.walkDistance;\n\n        /**\n         * Weapon Acquired\n         * @type {string}\n         */\n        this.weaponAcquired = content.weaponAcquired;\n\n        /**\n         * Weekly kills\n         * @type {string}\n         */\n        this.weeklyKills = content.weeklyKills;\n\n        /**\n         * Win points\n         * @type {string}\n         */\n        this.winPoints = content.winPoints;\n\n        /**\n         * Win ratio\n         * @type {string}\n         */\n        this.winRatio = content.winRatio;\n\n        /**\n         * Wins\n         * @type {string}\n         */\n        this.wins = content.wins;\n    }\n}\n\nmodule.exports = GameModeStats;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/playerseason/GameModeStats.js\n// module id = 9\n// module chunks = 0","module.exports = {\n    Client: require('./Client'),\n\n    Match: require('./matches/Match'),\n    Asset: require('./matches/Asset'),\n    Participant: require('./matches/Participant'),\n    Roster: require('./matches/Roster'),\n\n    GameModeStats: require('./playerseason/GameModeStats'),\n    PlayerSeason: require('./playerseason/PlayerSeason'),\n\n    Player: require('./Player'),\n    Season: require('./Season'),\n    Status: require('./Status'),\n\n    version: require('../package.json').version,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 10\n// module chunks = 0","const snekfetch = require('snekfetch');\nconst Package = require('../package.json');\n\nconst Util = require('./util/Util');\nconst Player = require('./Player');\nconst Match = require('./matches/Match');\nconst Status = require('./Status');\nconst Season = require('./Season');\nconst PlayerSeason = require('./playerseason/PlayerSeason');\n/**\n * The main hub for interacting with the pubg api, and starting point for any api instance\n * @class Client\n * @param {string} key PUBG app api token\n * @param {string} [defaultShard='pc-oc'] Default shard to use if none provided in methods\n */\nclass Client {\n    constructor(key, defaultShard = 'pc-oc') {\n        if (!key) {\n            throw new Error('No API key passed.');\n        }\n\n        /**\n         * The api key passed into the client\n         * @type {string}\n         */\n        this.key = key;\n\n        /**\n         * The default shard for the client if none provided\n         */\n        this.defaultShard = defaultShard;\n    }\n\n    /**\n     * Get player by the given id or name\n     * @param {Object} args Specify what player to get\n     * * {id: ['id1', 'id2']}\n     * * {id: 'id'}\n     * * {name: 'name'}\n     * * {name: ['name1', 'name2']}\n     * @param {string} [shard=this.defaultShard] The server shard to send the request to\n     * @returns {Promise<Array<Player>>|Promise<Player>}\n     * @memberof Client\n     */\n    getPlayer(args, shard = this.defaultShard) {\n        if (typeof args !== 'object' || typeof shard !== 'string') throw new Error('Requires (object, !string)');\n\n        if (args.id) {\n            return this._baseRequest({ endpoint: Array.isArray(args.id) ? 'players' : `players/${args.id}`, shard, query: Array.isArray(args.id) ? { 'filter[playerIds]': args.id.join(',') } : {} })\n                .then(players => Array.isArray(players.data) ? players.data.length === 1 ? new Player(players.data[0], this) : players.data.map(p => new Player(p, this)) : new Player(players.data, this))\n                .catch(e => Promise.reject(e.body.errors));\n        }\n        if (args.name) {\n            return this._baseRequest({ endpoint: 'players', shard, query: { 'filter[playerNames]': Array.isArray(args.name) ? args.name.join(',') : args.name } })\n                .then(players => Array.isArray(players.data) ? players.data.length === 1 ? new Player(players.data[0], this) : players.data.map(p => new Player(p, this)) : new Player(players.data, this))\n                .catch(e => Promise.reject(e.body.errors));\n        }\n        return Promise.reject(new Error('Invalid use of <Client>.getPlayer()'));\n    }\n\n    /**\n     * Get an array of all seasons of the shard\n     * @param {string} [shard=this.defaultShard] The server shard to send the request to\n     * @returns {Promise<Array<Season>>}\n     * @memberof Client\n     */\n    getSeasons(shard = this.defaultShard) {\n        return this._baseRequest({ endpoint: 'seasons', shard })\n            .then(seasons => seasons.data.map(s => new Season(s, this)));\n    }\n\n    /**\n     * Get a player season object\n     * @param {(string|Player)} player The player of the player season\n     * @param {(string|Season)} season The season of the player season\n     * @param {string} [shard=player.attributes.shardId|this.defaultShard] The server shard to send the request to\n     * @returns {Promise<PlayerSeason>}\n     * @memberof Client\n     */\n    getPlayerSeason(player, season, shard) {\n        return this._baseRequest({ endpoint: `players/${player instanceof Player ? player.id : player}/seasons/${season instanceof Season ? season.id : season}`, shard: player instanceof Player ? player.attributes.shardId : shard || this.defaultShard })\n            .then(ps => new PlayerSeason(ps.data));\n    }\n\n    /**\n     * Get a match from a match id\n     * @param {string} id Id of the match to get\n     * @param {string} [shard=this.defaultShard] The server shard to send the request to\n     * @returns {Promise<Match>}\n     * @memberof Client\n     */\n    getMatch(id, shard = this.defaultShard) {\n        if (typeof id !== 'string' || typeof shard !== 'string') throw new Error('Requires (string, !string)');\n        return this._baseRequest({ endpoint: `matches/${id}`, shard })\n            .then(match => new Match(match.data, this, match.included))\n            .catch(e => Promise.reject(e.body.errors));\n    }\n\n    /**\n     * Gets the status of the api\n     * @returns {Promise<Status>}\n     * @memberof Client\n     */\n    getStatus() {\n        return this._baseRequest({ endpoint: 'status' })\n            .then(status => new Status(status.data))\n            .catch(e => Promise.reject(e.body.errors));\n    }\n\n    /**\n     * Gets the status of the api\n     * @param {Date} [createdAt] The starting search date for the matches\n     * @param {string} [shard=this.defaultShard] The server shard to send the request to\n     * @returns {Promise<Array<Match>>}\n     * @memberof Client\n     */\n    getSamples(createdAt, shard = this.defaultShard) {\n        return this._baseRequest({ endpoint: 'samples', shard, query: createdAt instanceof Date ? { 'filter[createdAt]': createdAt.toISOString() } : {} })\n            .then(samples => samples.data.relationships.matches.data.map(m => new Match(m.id, this)))\n            .catch(e => Promise.reject(e.body.errors));\n    }\n\n    /**\n     * Fetches telemetry data object\n     * @param {string} url URL of the telemetry object\n     * @returns {Promise<Object>}\n     * @memberof Client\n     */\n    getTelemetry(url) {\n        if (!url || typeof url !== 'string') throw new Error('Requires (string)');\n        return this._baseRequest({ url });\n    }\n\n    /**\n     * Carries out a basic http request to the api\n     * @private\n     * @param {Object} options Object describing request\n     * @param {string} options.endpoint Endpoint to hit of the api\n     * @param {string} options.shard The server shard to send the request to\n     * @param {Object} [options.query={}] Snekfetch options\n     * @returns {Promise<Object>}\n     * @memberof Client\n     */\n    _baseRequest(options = {}) {\n        const url = options.url || Util.constructURL(options.endpoint, options.shard);\n        if (!url) throw new Error('Invalid shard');\n        return snekfetch.get(url)\n            .set(this._headers)\n            .query(options.query || {})\n            .then(r => r.body);\n    }\n\n\n    get _headers() {\n        return {\n            'User-Agent': `pubg.js v${Package.version} (${Package.homepage})`,\n            accept: 'application/json',\n            Authorization: `Bearer ${this.key}`,\n        };\n    }\n}\n\nmodule.exports = Client;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Client.js\n// module id = 11\n// module chunks = 0","import Snekfetch from './index.js';\n\nexport default Snekfetch;\n\nexport const { version } = Snekfetch;\nexport const { METHODS } = Snekfetch;\n\nexport const { acl } = Snekfetch;\nexport const { bind } = Snekfetch;\nexport const { checkout } = Snekfetch;\nexport const { connect } = Snekfetch;\nexport const { copy } = Snekfetch;\nconst { delete: _delete } = Snekfetch;\nexport { _delete as delete };\nexport const { get } = Snekfetch;\nexport const { head } = Snekfetch;\nexport const { link } = Snekfetch;\nexport const { lock } = Snekfetch;\nexport const { merge } = Snekfetch;\nexport const { mkactivity } = Snekfetch;\nexport const { mkcalendar } = Snekfetch;\nexport const { mkcol } = Snekfetch;\nexport const { move } = Snekfetch;\nexport const { notify } = Snekfetch;\nexport const { options } = Snekfetch;\nexport const { patch } = Snekfetch;\nexport const { post } = Snekfetch;\nexport const { propfind } = Snekfetch;\nexport const { proppatch } = Snekfetch;\nexport const { purge } = Snekfetch;\nexport const { put } = Snekfetch;\nexport const { rebind } = Snekfetch;\nexport const { report } = Snekfetch;\nexport const { search } = Snekfetch;\nexport const { source } = Snekfetch;\nexport const { subscribe } = Snekfetch;\nexport const { trace } = Snekfetch;\nexport const { unbind } = Snekfetch;\nexport const { unlink } = Snekfetch;\nexport const { unlock } = Snekfetch;\nexport const { unsubscribe } = Snekfetch;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/snekfetch/src/index.mjs\n// module id = 12\n// module chunks = 0","'use strict';\n\nconst transport = require(typeof window !== 'undefined' ? './browser' : './node');\n\n/**\n * Snekfetch\n * @extends Stream.Readable\n * @extends Promise\n */\nclass Snekfetch extends transport.Parent {\n  /**\n   * Options to pass to the Snekfetch constructor\n   * @typedef {object} SnekfetchOptions\n   * @memberof Snekfetch\n   * @property {object} [headers] Headers to initialize the request with\n   * @property {object|string|Buffer} [data] Data to initialize the request with\n   * @property {string|Object} [query] Query to intialize the request with\n   * @property {boolean} [redirect='follow'] If the request should follow redirects\n   * @property {object} [qs=querystring] Querystring module to use, any object providing\n   * `stringify` and `parse` for querystrings\n   * @property {external:Agent|boolean} [agent] Whether to use an http agent\n   */\n\n  /**\n   * Create a request.\n   * Usually you'll want to do `Snekfetch#method(url [, options])` instead of\n   * `new Snekfetch(method, url [, options])`\n   * @param {string} method HTTP method\n   * @param {string} url URL\n   * @param {SnekfetchOptions} [opts] Options\n   */\n  constructor(method, url, opts = {}) {\n    super();\n    this.options = Object.assign({\n      qs: transport.querystring,\n      method,\n      url,\n      redirect: 'follow',\n    }, opts, {\n      headers: {},\n      query: undefined,\n      data: undefined,\n    });\n    if (opts.headers)\n      this.set(opts.headers);\n    if (opts.query)\n      this.query(opts.query);\n    if (opts.data)\n      this.send(opts.data);\n  }\n\n  /**\n   * Add a query param to the request\n   * @param {string|Object} name Name of query param or object to add to query\n   * @param {string} [value] If name is a string value, this will be the value of the query param\n   * @returns {Snekfetch} This request\n   */\n  query(name, value) {\n    if (this.options.query === undefined)\n      this.options.query = {};\n    if (typeof name === 'object')\n      Object.assign(this.options.query, name);\n    else\n      this.options.query[name] = value;\n\n    return this;\n  }\n\n  /**\n   * Add a header to the request\n   * @param {string|Object} name Name of query param or object to add to headers\n   * @param {string} [value] If name is a string value, this will be the value of the header\n   * @returns {Snekfetch} This request\n   */\n  set(name, value) {\n    if (typeof name === 'object') {\n      for (const [k, v] of Object.entries(name))\n        this.options.headers[k.toLowerCase()] = v;\n    } else {\n      this.options.headers[name.toLowerCase()] = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Attach a form data object\n   * @param {string} name Name of the form attachment\n   * @param {string|Object|Buffer} data Data for the attachment\n   * @param {string} [filename] Optional filename if form attachment name needs to be overridden\n   * @returns {Snekfetch} This request\n   */\n  attach(...args) {\n    const form = this.options.data instanceof transport.FormData ?\n      this.options.data : this.options.data = new transport.FormData();\n    if (typeof args[0] === 'object') {\n      for (const [k, v] of Object.entries(args[0]))\n        this.attach(k, v);\n    } else {\n      form.append(...args);\n    }\n\n    return this;\n  }\n\n  /**\n   * Send data with the request\n   * @param {string|Buffer|Object} data Data to send\n   * @returns {Snekfetch} This request\n   */\n  send(data) {\n    if (data instanceof transport.FormData || transport.shouldSendRaw(data)) {\n      this.options.data = data;\n    } else if (data !== null && typeof data === 'object') {\n      const header = this.options.headers['content-type'];\n      let serialize;\n      if (header) {\n        if (header.includes('application/json'))\n          serialize = JSON.stringify;\n        else if (header.includes('urlencoded'))\n          serialize = this.options.qs.stringify;\n      } else {\n        this.set('Content-Type', 'application/json');\n        serialize = JSON.stringify;\n      }\n      this.options.data = serialize(data);\n    } else {\n      this.options.data = data;\n    }\n    return this;\n  }\n\n  then(resolver, rejector) {\n    if (this._response)\n      return this._response.then(resolver, rejector);\n    this._finalizeRequest();\n    // eslint-disable-next-line no-return-assign\n    return this._response = transport.request(this)\n      .then(({ raw, headers, statusCode, statusText }) => {\n        // forgive me :(\n        const self = this; // eslint-disable-line consistent-this\n        /**\n         * Response from Snekfetch\n         * @typedef {Object} SnekfetchResponse\n         * @memberof Snekfetch\n         * @prop {HTTP.Request} request\n         * @prop {?string|object|Buffer} body Processed response body\n         * @prop {Buffer} raw Raw response body\n         * @prop {boolean} ok If the response code is >= 200 and < 300\n         * @prop {number} statusCode HTTP status code\n         * @prop {string} statusText Human readable HTTP status\n         */\n        const res = {\n          request: this.request,\n          get body() {\n            delete res.body;\n            const type = res.headers['content-type'];\n            if (raw instanceof ArrayBuffer)\n              raw = new window.TextDecoder('utf8').decode(raw); // eslint-disable-line no-undef\n            if (/application\\/json/.test(type)) {\n              try {\n                res.body = JSON.parse(raw);\n              } catch (err) {\n                res.body = String(raw);\n              }\n            } else if (/application\\/x-www-form-urlencoded/.test(type)) {\n              res.body = self.options.qs.parse(String(raw));\n            } else {\n              res.body = raw;\n            }\n            return res.body;\n          },\n          raw,\n          ok: statusCode >= 200 && statusCode < 400,\n          headers,\n          statusCode,\n          statusText,\n        };\n\n        if (res.ok)\n          return res;\n        const err = new Error(`${statusCode} ${statusText}`.trim());\n        Object.assign(err, res);\n        return Promise.reject(err);\n      })\n      .then(resolver, rejector);\n  }\n\n  catch(rejector) {\n    return this.then(null, rejector);\n  }\n\n  /**\n   * End the request\n   * @param {Function} [cb] Optional callback to handle the response\n   * @returns {Promise} This request\n   */\n  end(cb) {\n    return this.then(\n      (res) => (cb ? cb(null, res) : res),\n      (err) => (cb ? cb(err, err.status ? err : null) : Promise.reject(err)),\n    );\n  }\n\n  _finalizeRequest() {\n    if (this.options.method !== 'HEAD')\n      this.set('Accept-Encoding', 'gzip, deflate');\n    if (this.options.data && this.options.data.getBoundary)\n      this.set('Content-Type', `multipart/form-data; boundary=${this.options.data.getBoundary()}`);\n\n    if (this.options.query) {\n      const [url, query] = this.options.url.split('?');\n      this.options.url = `${url}?${this.options.qs.stringify(this.options.query)}${query ? `&${query}` : ''}`;\n    }\n  }\n\n  _read() {\n    this.resume();\n    if (this._response)\n      return;\n    this.catch((err) => this.emit('error', err));\n  }\n}\n\n/**\n * Create a ((THIS)) request\n * @dynamic this.METHODS\n * @method Snekfetch.((THIS)lowerCase)\n * @param {string} url The url to request\n * @param {Snekfetch.snekfetchOptions} [opts] Options\n * @returns {Snekfetch}\n */\nSnekfetch.METHODS = transport.METHODS.filter((m) => m !== 'M-SEARCH');\nfor (const method of Snekfetch.METHODS) {\n  Snekfetch[method.toLowerCase()] = function runMethod(url, opts) {\n    const Constructor = this && this.prototype instanceof Snekfetch ? this : Snekfetch;\n    return new Constructor(method, url, opts);\n  };\n}\n\nmodule.exports = Snekfetch;\n\n/**\n * @external Agent\n * @see {@link https://nodejs.org/api/http.html#http_class_http_agent}\n */\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/snekfetch/src/index.js\n// module id = 13\n// module chunks = 0","'use strict';\n\n/* eslint-env browser */\n\nfunction request(snek) {\n  snek.options.body = snek.options.data;\n  const type = snek.options.responseType === 'arraybuffer' ? 'arrayBuffer' : 'text';\n  return window.fetch(snek.options.url, snek.options)\n    .then((r) => r[type]().then((raw) => {\n      const headers = {};\n      for (const [k, v] of r.headers.entries())\n        headers[k.toLowerCase()] = v;\n      return {\n        raw,\n        headers,\n        statusCode: r.status,\n        statusText: r.statusText,\n      };\n    }));\n}\n\nmodule.exports = {\n  request,\n  shouldSendRaw: () => false,\n  METHODS: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH'],\n  Parent: Object,\n  FormData: window.FormData,\n  querystring: {\n    parse: (str) => {\n      const parsed = {};\n      for (const [k, v] of new window.URLSearchParams(str).entries())\n        parsed[k] = v;\n      return parsed;\n    },\n    stringify: (obj) => new window.URLSearchParams(obj).toString(),\n  },\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/snekfetch/src/browser/index.js\n// module id = 14\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node (ignored)\n// module id = 15\n// module chunks = 0","const Constants = require('./Constants');\n\nclass Util {\n    constructor() {\n        throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n    }\n    static constructURL(endpoint, shard) {\n        return shard ? this.verifyShard(shard) ? `${Constants.BASE_URL}/shards/${shard}/${endpoint}` : undefined : `${Constants.BASE_URL}/${endpoint}`;\n    }\n\n    static verifyShard(shard) { // eslint-disable-line no-unused-vars\n        return Constants.SHARDS.includes(shard);\n    }\n}\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/Util.js\n// module id = 16\n// module chunks = 0","module.exports = {\n    BASE_URL: 'https://api.playbattlegrounds.com',\n\n    SHARDS: [\n        'xbox-as',\n        'xbox-eu',\n        'xbox-na',\n        'xbox-oc',\n        'pc-krjp',\n        'pc-na',\n        'pc-eu',\n        'pc-oc',\n        'pc-kakao',\n        'pc-sea',\n        'pc-sa',\n        'pc-as',\n    ],\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/Constants.js\n// module id = 17\n// module chunks = 0"],"sourceRoot":""}